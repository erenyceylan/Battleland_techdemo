//Code writen by MorganLeFlay and horusr

Label* labels[10];
Button* buttons[10];
DynamicSprite* sprite;
Character* Char;
String word_index[3];
String punchs[3];
String repunchs[6]; //0, 1, 2 are for well done repunchs, 3, 4, 5 are for failed ones
Dialog* second_round;
bool word_repunch[10];
bool repunch_check[3];
int timerstime = 0;
int select_words;

//----------------------------------------------------------------------------------------------------
// You need to add your labels and buttons here.
//----------------------------------------------------------------------------------------------------
function game_start() 
{
    labels[0] = Label1;
    labels[1] = Label2;
    labels[2] = Label3;
    labels[3] = Label4;
    labels[4] = Label5;
    labels[5] = Label6;
    labels[6] = Label7;
    labels[7] = Label8;
    labels[8] = Label9;
    labels[9] = Label10;
    buttons[0] = Button1;
    buttons[1] = Button2;
    buttons[2] = Button3;
    buttons[3] = Button4;
    buttons[4] = Button5;
    buttons[5] = Button6;
    buttons[6] = Button7;
    buttons[7] = Button8;
    buttons[8] = Button9;
    buttons[9] = Button10;
}



//----------------------------------------------------------------------------------------------------
// A shifter for labels and buttons. This way labels look like a sentence.
// Don't forget to change loop's variable.
//----------------------------------------------------------------------------------------------------
function shifter() 
{
  int width;
  Label* shifting_label;
  Label* reference_label;
  Button* shifting_btn;
  
  for (int i = 9; i >= 0; i--)
  {
    shifting_label = labels[i];
    shifting_btn = buttons[i];
    width = shifting_label.Width;
    
    shifting_label.Width = GetTextWidth(shifting_label.Text, eFontfntSpeech) +1;
    if (i == 4 || i == 9)
    {
      shifting_label.X = System.ViewportWidth - shifting_label.Width;
    }
    else
    {
      reference_label = labels[i+1];
      shifting_label.X = reference_label.X - shifting_label.Width;
    }
    
    shifting_btn.Width = shifting_label.Width;
    shifting_btn.Height = shifting_label.Height;
    shifting_btn.X = shifting_label.X;
    shifting_btn.Text = String.Format("%d", word_repunch[i]);
  }
}



//----------------------------------------------------------------------------------------------------
// Sentence splitter and label changer.
//----------------------------------------------------------------------------------------------------
function split(Character* CharID, String sentence) 
{
  sentence = sentence.Append("/");
  int end;
  Label* currentLabel;
  
  for (int num_word = 0; sentence.Length > 1; num_word++) 
  {
    end = sentence.IndexOf("/");
    currentLabel = labels[num_word];
    currentLabel.Text = sentence.Truncate(end);
    currentLabel.TextColor = CharID.SpeechColor;
    sentence = sentence.Substring(end+1, sentence.Length-end-1);
  }
  
  shifter();
}


//----------------------------------------------------------------------------------------------------
// This function runs when a button clicked and if player clicked a word which is on, it adds 5 point,
// else decrease timer.
// Put this code in every button's on_click function in global script.
//----------------------------------------------------------------------------------------------------
function battle_points(int btn_id)
{
  int all_false;
  
  if (word_repunch[btn_id])
  {
    select_words += 5;
    word_repunch[btn_id] = false;
  }
  
  for (int i; i < 10; i++)
  {
    if (!word_repunch[i]) all_false++;
  }
  
  if (timerstime < 200 && all_false == 10) repunch_check[2] = true;
  else if (timerstime < 400 && all_false == 10) repunch_check[1] = true;
  else if (timerstime < 600 && all_false == 10) repunch_check[0] = true;
}


//----------------------------------------------------------------------------------------------------
// Sets word_repunch to true or false.
// Uses setted word_index in dialog script, format is like: "TTTTTFFFFF".
//----------------------------------------------------------------------------------------------------
function index_setter(int index_num)
{
  for (int i = 0; i < word_index[index_num].Length; i++)
  {
    if (word_index[index_num].Chars[i] == 'T') word_repunch[i] = true;
    else word_repunch[i] = false;
  }
}


//----------------------------------------------------------------------------------------------------
// Timer for battle.
//----------------------------------------------------------------------------------------------------
function battle_timer()
{
  if (sprite == null) sprite = DynamicSprite.Create(60, 10);
  DrawingSurface* surface = sprite.GetDrawingSurface();
  surface.Clear(1);
  surface.DrawingColor = 4;
  surface.DrawRectangle(timerstime/10, 0, 60, 10);
  Timer.NormalGraphic = sprite.Graphic;
  surface.Release();
}



//----------------------------------------------------------------------------------------------------
// Splitting answers and makes the player say.
//----------------------------------------------------------------------------------------------------
function answer_split(String sentence)
{
  int end = sentence.IndexOf("/");
  
  for (int i; sentence.Length > 1; i++)
  {
    end = sentence.IndexOf("/");
    player.Say("%s", sentence.Truncate(end));
    
    if (repunch_check[i]) aApplause.Play();
    else aBoooo.Play();
    
    sentence = sentence.Substring(end+1, sentence.Length-end-1);
  }
  second_round.Start();
}



//----------------------------------------------------------------------------------------------------
// Answering mechanism.
//----------------------------------------------------------------------------------------------------
function answer()
{
  String punch_sentence = "";
  
  if (repunch_check[0]) punch_sentence = punch_sentence.Append(repunchs[0]);
  else punch_sentence = punch_sentence.Append(repunchs[3]);
  if (repunch_check[1]) punch_sentence = punch_sentence.Append(repunchs[1]);
  else punch_sentence = punch_sentence.Append(repunchs[4]);
  if (repunch_check[2]) punch_sentence = punch_sentence.Append(repunchs[2]);
  else punch_sentence = punch_sentence.Append(repunchs[5]);
  
  answer_split(punch_sentence);
}



function repeatedly_execute()
{
  Points.Text = String.Format("%d", select_words);
  
  
  if (gInventoryBar.Visible) gWord_point.Y = gInventoryBar.Height;
  else gWord_point.Y = 0;
  
  
  if (timerstime > 0)
  {
    battle_timer();
    timerstime--;
    
    if (timerstime == 199) 
    {
      index_setter(2);
      split(Char, punchs[2]);
    }
    else if (timerstime == 399) 
    {
      index_setter(1);
      split(Char, punchs[1]);
    }
    else if (timerstime == 599)
    {
      index_setter(0);
      split(Char, punchs[0]);
    }
  }
  else if (gBattle.Visible)
  {
    gBattle.Visible = false;
    sprite = null;
    select_words = 0;
    answer();
  }
}




//----------------------------------------------------------------------------------------------------
// Main battle combat function. Gets an array of sentences and passes to splitter one by one.
//----------------------------------------------------------------------------------------------------
function combat(Character* CharID, Dialog* dialog_name)
{
  timerstime = 600;
  gBattle.Visible = true;
  Char = CharID;
  second_round = dialog_name;
}


export word_index;
export punchs;
export repunchs;